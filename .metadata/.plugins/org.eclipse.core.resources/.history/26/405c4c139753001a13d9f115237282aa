package com.example.springboot.repository;

import java.io.Serializable;
import java.util.List;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;


@SuppressWarnings("unchecked")
@Repository
public abstract class GenericRepository<T, PK extends Serializable>{
	
	private Class<T> clazz;
	
	@Autowired
	@Qualifier("sessionFactory")
	private SessionFactory sessionFactory;
	
	public GenericRepository(Class<T> type) {
        this.clazz = type;
    }	
	
	
	public T save(T entity) throws Exception {
		try {
			getSession().save(entity);
		    getSession().getTransaction().commit();
			return entity;
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	public List<T> save(List<T> entities) throws Exception {
		try {
			getSession().save(entities);
		    getSession().getTransaction().commit();
			return(entities);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	
	public T get(PK id) throws Exception {
		try {
			return (T) getSession().get(clazz, id);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	
	public void update(T entity) throws Exception {
		try {
			getSession().update(entity);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}

	
	public void delete(T entity) throws Exception {
		try {
			getSession().delete(entity);
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	
	
	public List<T> getAll() throws Exception {
		try {
			return getSession().createQuery("from " + clazz.getName()).list();
		} catch (Exception e) {
			throw new Exception(e);
		}
	}
	

	
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
	
	protected Session getSession() {
		Session session = sessionFactory.getCurrentSession().openSession();
		session.beginTransaction();
		return session;
	}
	
}
