package com.example.springboot;

import java.util.Arrays;

import javax.persistence.EntityManagerFactory;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;


@SpringBootApplication
@EnableConfigurationProperties
@ComponentScan(basePackages ={"com.example.springboot"})
@EntityScan("com.example.springboot.entity")
@EnableJpaRepositories("com.example.springboot.repository")
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	@Bean
	public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
		return args -> {

			System.out.println("Let's inspect the beans provided by Spring Boot:");

			String[] beanNames = ctx.getBeanDefinitionNames();
			Arrays.sort(beanNames);
			for (String beanName : beanNames) {
				System.out.println(beanName);
			}

		};
	}
	
    @Autowired
    private EntityManagerFactory entityManagerFactory;

    /**
     * This bean needs to be wired in so that a SessionFactory can be wired in to other data access beans.
     *
     * @return a session factory bean
     */
    @Bean
    public SessionFactory sessionFactoryProvider() {
        return entityManagerFactory.unwrap(SessionFactory.class);
    }
}